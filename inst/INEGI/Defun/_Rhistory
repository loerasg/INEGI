return(MuestraGr)
}
Etapa01<-function(IDm,CausaD,Cap,Es,ps,n,Grande){
cat("~~~ Probando dimenciones                          ~~~ \n")
if(length(IDm)!=length(CausaD)){
stop ("No se puede seguir, numero de ID y Casos de defunci\u00F3n no coinciden")}
Ordenar(IDm,CausaD)
if(missing(Cap)){Cap <- 1:20}
else{Cap<-as.integer(Cap)}
if(missing(Es)){Es <- rep(.03,20)}
else{Es <- Es}
if(missing(ps)){ps <- rep(.5,20)}
else{ps <- ps}
if(missing(n))
{
Ns<-PN[,2]
z<-rep(1.96, 20)
S<-z^2*ps*(1-ps)*Ns
I<-Es^2*(Ns-1)+z^2*ps*(1-ps)
n<-as.integer(S/I)
}
else{n <- as.integer(n)}
MuestraGr<-OptFact(Cap,PN[,2],n)
Muestra<-merge(codord, MuestraGr, by.x="Id", by.y="NT")
if(missing(Grande)){
Mu<-Muestra
Muestra<-Mu[Mu$EnMuestra==1,]}
return(Muestra)
}
Tam<-Ordenar(IDm=DatCap[,1], CausaD=DatCap[,2])
Tam[[1]]
Tam[[2]]
Tam[[2]][,2]
Table(Tam[[1]]$AutCap)
table(Tam[[1]]$AutCap)
table(Tam[[1]]$CapAut)
missing(CausaD)
#Etapa 1
DefCap <- function(cau="character")
{
d<-length(cau)
cat("~~~ Lectura de ",d, " c\u00F3digos de defunci\u00F3n      ~~~ \n")
Capitulo<-rep(0,d)
for (i in 1:d)
{
ca<-substr(cau[i],1,3)
if ("A00"<=ca & ca<="B99") {Capitulo[i]<-1}
else if ("C00"<=ca & ca<="D48") {Capitulo[i]<-2}
else if ("D50"<=ca & ca<="D89") {Capitulo[i]<-3}
else if ("E00"<=ca & ca<="E90") {Capitulo[i]<-4}
else if ("F00"<=ca & ca<="F99") {Capitulo[i]<-5}
else if ("G00"<=ca & ca<="G99") {Capitulo[i]<-6}
else if ("H00"<=ca & ca<="H59") {Capitulo[i]<-7}
else if ("H60"<=ca & ca<="H95") {Capitulo[i]<-8}
else if ("I00"<=ca & ca<="I99") {Capitulo[i]<-9}
else if ("J00"<=ca & ca<="J99") {Capitulo[i]<-10}
else if ("K00"<=ca & ca<="K93") {Capitulo[i]<-11}
else if ("L00"<=ca & ca<="L99") {Capitulo[i]<-12}
else if ("M00"<=ca & ca<="M99") {Capitulo[i]<-13}
else if ("N00"<=ca & ca<="N99") {Capitulo[i]<-14}
else if ("O00"<=ca & ca<="O99") {Capitulo[i]<-15}
else if ("P00"<=ca & ca<="P96") {Capitulo[i]<-16}
else if ("Q00"<=ca & ca<="Q99") {Capitulo[i]<-17}
else if ("R00"<=ca & ca<="R99") {Capitulo[i]<-18}
else if ("S01"<=ca & ca<="T99") {Capitulo[i]<-19}
else if ("V00"<=ca & ca<="Y98") {Capitulo[i]<-20}
else Capitulo[i]<-99
}
Error<-sum(Capitulo==99)
cat("~~~ Finalizo lectura de los c\u00F3digos con",Error, "Errores ~~~ \n")
list(Capitulo,Error)
}
Ordenar<-function(IDm,CausaD)
{
IDm <- as.integer(IDm)
CausaD <- as.character(CausaD)
CapA<-DefCap(cau=CausaD)
CapAut<-as.integer(CapA[[1]])
codcap<-as.data.frame(cbind(IDm,CausaD,CapAut))
cat("~~~ Ordenando Datos                               ~~~ \n")
codcapor<-codcap[order(CausaD),]
Id<-1:dim(codcapor)[1]
codord<-cbind(codcapor,Id)
Tem<-codord[codord$CapAut==1,]
PN<-c(1,dim(Tem)[1])
for (i in 2:20){
Tem<-codord[codord$CapAut==i,]
PN<-rbind(PN,c(i,dim(Tem)[1]))}
list(codord,PN)
}
OptFact<-function(V1,Ns,n)
{
cat("~~~ Inicia etapa de muestra                       ~~~ \n")
t<-0;pr<-0
while (pr==0){t<-t+1
if (Ns[t]>0){
NT<-c(1:Ns[t])
Capit<-as.integer(rep(V1[t],Ns[t]))
FactorExp<-rep(Ns[t]/n[t],Ns[t])
EnMuestra<-as.integer(srswor(n[t],Ns[t]))
MuestraGr<-data.frame(NT,Capit,FactorExp,EnMuestra)
cat(t," ")
Ac<-Ns[t]
pr<-1}}
for (i in (t+1):20) {Ac[i]<-Ac[i-1]+Ns[i]}
for (i in (t+1):20)
{
if (Ns[i]>0){
NT<-c((Ac[i-1]+1):Ac[i])
N<-Ns[i];m<-n[i]
Capit<-as.integer(rep(V1[i],N))
FactorExp<-rep(N/m,N)
EnMuestra<-as.integer(srswor(m,N))
Mu<-data.frame(NT,Capit,FactorExp,EnMuestra)
MuestraGr<-rbind(MuestraGr,Mu)
cat(i," ")}
}
cat("~~ Fin ~~~ \n")
return(MuestraGr)
}
Etapa01<-function(IDm,CausaD,Cap,Es,ps,n,Grande,Tam){
cat("~~~ Probando dimenciones                          ~~~ \n")
if(length(IDm)!=length(CausaD)){
stop ("No se puede seguir, numero de ID y Casos de defunci\u00F3n no coinciden")}
if(missing(CausaD)==F){Tam<-Ordenar(IDm,CausaD)}
if(missing(Cap)){Cap <- 1:20}
else{Cap<-as.integer(Cap)}
if(missing(Es)){Es <- rep(.03,20)}
else{Es <- Es}
if(missing(ps)){ps <- rep(.5,20)}
else{ps <- ps}
if(missing(n))
{
Ns<-Tam[[2]][,2]
z<-rep(1.96, 20)
S<-z^2*ps*(1-ps)*Ns
I<-Es^2*(Ns-1)+z^2*ps*(1-ps)
n<-as.integer(S/I)
}
else{n <- as.integer(n)}
MuestraGr<-OptFact(Cap,Tam[[2]][,2],n)
Muestra<-merge(Tam[[1]], MuestraGr, by.x="Id", by.y="NT")
if(missing(Grande)){
Mu<-Muestra
Muestra<-Mu[Mu$EnMuestra==1,]}
return(Muestra)
}
Etapa01(IDm=DatCap[,1], CausaD=DatCap[,2], n=InfCap$n)
library(sampling)
Etapa01(IDm=DatCap[,1], CausaD=DatCap[,2], n=InfCap$n)
Etapa01(IDm=DatCap[,1], CausaD=DatCap[,2], ps=InfCap$ps)
Etapa1<-read.dbf("C:\\TEMP\\mini12.dbf")
library(foreign)
Etapa1<-read.dbf("C:\\TEMP\\mini12.dbf")
Tam<-Ordenar(IDm=Etapa1[,1], CausaD=Etapa1[,2])
View(Etapa1)
Tam<-Ordenar(IDm=Etapa1[,2], CausaD=Etapa1[,1])
DefCap <- function(cau="character")
{
d<-length(cau)
cat("~~~ Lectura de ",d, " c\u00F3digos de defunci\u00F3n      ~~~ \n")
Capitulo<-rep(0,d)
for (i in 1:d)
{
ca<-substr(cau[i],1,3)
if ("A00"<=ca & ca<="B99") {Capitulo[i]<-1}
else if ("C00"<=ca & ca<="D48") {Capitulo[i]<-2}
else if ("D50"<=ca & ca<="D89") {Capitulo[i]<-3}
else if ("E00"<=ca & ca<="E90") {Capitulo[i]<-4}
else if ("F00"<=ca & ca<="F99") {Capitulo[i]<-5}
else if ("G00"<=ca & ca<="G99") {Capitulo[i]<-6}
else if ("H00"<=ca & ca<="H59") {Capitulo[i]<-7}
else if ("H60"<=ca & ca<="H95") {Capitulo[i]<-8}
else if ("I00"<=ca & ca<="I99") {Capitulo[i]<-9}
else if ("J00"<=ca & ca<="J99") {Capitulo[i]<-10}
else if ("K00"<=ca & ca<="K93") {Capitulo[i]<-11}
else if ("L00"<=ca & ca<="L99") {Capitulo[i]<-12}
else if ("M00"<=ca & ca<="M99") {Capitulo[i]<-13}
else if ("N00"<=ca & ca<="N99") {Capitulo[i]<-14}
else if ("O00"<=ca & ca<="O99") {Capitulo[i]<-15}
else if ("P00"<=ca & ca<="P96") {Capitulo[i]<-16}
else if ("Q00"<=ca & ca<="Q99") {Capitulo[i]<-17}
else if ("R00"<=ca & ca<="R99") {Capitulo[i]<-18}
else if ("S01"<=ca & ca<="T99") {Capitulo[i]<-19}
else if ("V00"<=ca & ca<="Y98") {Capitulo[i]<-20}
else Capitulo[i]<-99
}
Error<-sum(Capitulo==99)
cat("~~~ Finalizo lectura de los c\u00F3digos con",Error, "Errores ~~~ \n")
list(Capitulo,Error)
}
Ordenar<-function(IDm,CausaD)
{
IDm <- as.integer(IDm)
CausaD <- as.character(CausaD)
CapA<-DefCap(cau=CausaD)
CapAut<-as.integer(CapA[[1]])
codcap<-as.data.frame(cbind(IDm,CausaD,CapAut))
cat("~~~ Ordenando Datos                               ~~~ \n")
codcapor<-codcap[order(CausaD),]
Id<-1:dim(codcapor)[1]
codord<-cbind(codcapor,Id)
Tem<-codord[codord$CapAut==1,]
PN<-c(1,dim(Tem)[1])
for (i in 2:20){
Tem<-codord[codord$CapAut==i,]
PN<-rbind(PN,c(i,dim(Tem)[1]))}
list(codord,PN)
}
OptFact<-function(V1,Ns,n)
{
cat("~~~ Inicia etapa de muestra                       ~~~ \n")
t<-0;pr<-0
while (pr==0){t<-t+1
if (Ns[t]>0){
NT<-c(1:Ns[t])
Capit<-as.integer(rep(V1[t],Ns[t]))
FactorExp<-rep(Ns[t]/n[t],Ns[t])
EnMuestra<-as.integer(srswor(n[t],Ns[t]))
MuestraGr<-data.frame(NT,Capit,FactorExp,EnMuestra)
cat(t," ")
Ac<-Ns[t]
pr<-1}}
for (i in (t+1):20) {Ac[i]<-Ac[i-1]+Ns[i]}
for (i in (t+1):20)
{
if (Ns[i]>0){
NT<-c((Ac[i-1]+1):Ac[i])
N<-Ns[i];m<-n[i]
Capit<-as.integer(rep(V1[i],N))
FactorExp<-rep(N/m,N)
EnMuestra<-as.integer(srswor(m,N))
Mu<-data.frame(NT,Capit,FactorExp,EnMuestra)
MuestraGr<-rbind(MuestraGr,Mu)
cat(i," ")}
}
cat("~~ Fin ~~~ \n")
return(MuestraGr)
}
Etapa01<-function(IDm,CausaD,Cap,Es,ps,n,Grande,Tam){
cat("~~~ Probando dimenciones                          ~~~ \n")
if(length(IDm)!=length(CausaD)){
stop ("No se puede seguir, numero de ID y Casos de defunci\u00F3n no coinciden")}
if(missing(CausaD)==F){Tam<-Ordenar(IDm,CausaD)}
if(missing(Cap)){Cap <- 1:20}
else{Cap<-as.integer(Cap)}
if(missing(Es)){Es <- rep(.03,20)}
else{Es <- Es}
if(missing(ps)){ps <- rep(.5,20)}
else{ps <- ps}
if(missing(n))
{
Ns<-Tam[[2]][,2]
z<-rep(1.96, 20)
S<-z^2*ps*(1-ps)*Ns
I<-Es^2*(Ns-1)+z^2*ps*(1-ps)
n<-as.integer(S/I)
}
else{n <- as.integer(n)}
MuestraGr<-OptFact(Cap,Tam[[2]][,2],n)
Muestra<-merge(Tam[[1]], MuestraGr, by.x="Id", by.y="NT")
if(missing(Grande)){
Mu<-Muestra
Muestra<-Mu[Mu$EnMuestra==1,]}
return(Muestra)
}
Datos <- read.table("C:/TEMP/DatCap2012a.csv", header=FALSE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
Etapa01(n=Datos$V4, Tam=Tam)
Etapa01<-function(IDm,CausaD,Cap,Es,ps,n,Grande,Tam){
cat("~~~ Probando dimenciones                          ~~~ \n")
if(length(IDm)!=length(CausaD)){
stop ("No se puede seguir, numero de ID y Casos de defunci\u00F3n no coinciden")}
if(missing(IDm)==F or missing(CausaD)==F){Tam<-Ordenar(IDm,CausaD)}
if(missing(Cap)){Cap <- 1:20}
else{Cap<-as.integer(Cap)}
if(missing(Es)){Es <- rep(.03,20)}
else{Es <- Es}
if(missing(ps)){ps <- rep(.5,20)}
else{ps <- ps}
if(missing(n))
{
Ns<-Tam[[2]][,2]
z<-rep(1.96, 20)
S<-z^2*ps*(1-ps)*Ns
I<-Es^2*(Ns-1)+z^2*ps*(1-ps)
n<-as.integer(S/I)
}
else{n <- as.integer(n)}
MuestraGr<-OptFact(Cap,Tam[[2]][,2],n)
Muestra<-merge(Tam[[1]], MuestraGr, by.x="Id", by.y="NT")
if(missing(Grande)){
Mu<-Muestra
Muestra<-Mu[Mu$EnMuestra==1,]}
return(Muestra)
}
Etapa01<-function(IDm,CausaD,Cap,Es,ps,n,Grande,Tam){
cat("~~~ Probando dimenciones                          ~~~ \n")
if(length(IDm)!=length(CausaD)){
stop ("No se puede seguir, numero de ID y Casos de defunci\u00F3n no coinciden")}
if((missing(IDm)==F) & (missing(CausaD)==F)){Tam<-Ordenar(IDm,CausaD)}
if(missing(Cap)){Cap <- 1:20}
else{Cap<-as.integer(Cap)}
if(missing(Es)){Es <- rep(.03,20)}
else{Es <- Es}
if(missing(ps)){ps <- rep(.5,20)}
else{ps <- ps}
if(missing(n))
{
Ns<-Tam[[2]][,2]
z<-rep(1.96, 20)
S<-z^2*ps*(1-ps)*Ns
I<-Es^2*(Ns-1)+z^2*ps*(1-ps)
n<-as.integer(S/I)
}
else{n <- as.integer(n)}
MuestraGr<-OptFact(Cap,Tam[[2]][,2],n)
Muestra<-merge(Tam[[1]], MuestraGr, by.x="Id", by.y="NT")
if(missing(Grande)){
Mu<-Muestra
Muestra<-Mu[Mu$EnMuestra==1,]}
return(Muestra)
}
Etapa01(n=Datos$V4, Tam=Tam)
Etapa01(IDm=1,CausaD=1,n=Datos$V4, Tam=Tam)
Etapa01<-function(IDm,CausaD,Cap,Es,ps,n,Grande,Tam){
cat("~~~ Probando dimenciones                          ~~~ \n")
if(length(IDm)!=length(CausaD)){
stop ("No se puede seguir, numero de ID y Casos de defunci\u00F3n no coinciden")}
Tam<-Ordenar(IDm,CausaD)
if(missing(Cap)){Cap <- 1:20}
else{Cap<-as.integer(Cap)}
if(missing(Es)){Es <- rep(.03,20)}
else{Es <- Es}
if(missing(ps)){ps <- rep(.5,20)}
else{ps <- ps}
if(missing(n))
{
Ns<-Tam[[2]][,2]
z<-rep(1.96, 20)
S<-z^2*ps*(1-ps)*Ns
I<-Es^2*(Ns-1)+z^2*ps*(1-ps)
n<-as.integer(S/I)
}
else{n <- as.integer(n)}
MuestraGr<-OptFact(Cap,Tam[[2]][,2],n)
Muestra<-merge(Tam[[1]], MuestraGr, by.x="Id", by.y="NT")
if(missing(Grande)){
Mu<-Muestra
Muestra<-Mu[Mu$EnMuestra==1,]}
return(Muestra)
}
Etapa01(IDm=Etapa1$CODIGOREG, CausaD=Etapa1$CAUSADEF, n=Datos$V4)
shiny::runApp('D:/Inegi/R/shiny/stockVis')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
install.packages("ggplot2")
install.packages("ggplot2")
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/shiny-examples-master/012-datatables')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
install.packages("ggplot2")
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
names(islands)
names(islands) <- NULL
islands
names(islands)
rm(islands)
z <- list(a = 1, b = "c", c = 1:3)
z
names(z)
names(z)[3] <- "c2"
z
z <- 1:3
names(z)
names(z)[2] <- "b"
z
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
install.packages(c("ggplot2", "glmnet", "knitr", "RSelenium"))
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
runApp("SelectableRows-master")
runApp("custom-input-binding-master")
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
install.packages(c("np", "party", "statmod"))
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
library(raster)
library(maptools)
library(rgdal)
library(animation)
library(RColorBrewer)
library(ggplot2)
malb<-getData("GADM", country="MWI", level=1)
malp<-getData("worldclim", var="prec", res=0.5, lon=35, lat=-14)
library(ggplot2)
# read students data from PISA 2012
# directly from URL
con <- url("http://beta.icm.edu.pl/PISAcontest/data/student2012.rda")
load(con)
install.packages("Rdocumentation")
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
library("knitr", lib.loc="C:/Program Files/R/R-3/library")
> than to receive.
```
install.packages("cranvas")
install.packages("lasso2")
install.packages('knitr', repos = c('http://rforge.net', 'http://cran.rstudio.org'),
type = 'source')
install.packages("knitr", repos = c("http://rforge.net", "http://cran.rstudio.org"),
type = 'source')
system.file("inst/shiny", package="knitr")
shinyAppDir(
system.file("inst/shiny", package="knitr"),
options=list(
width="100%", height=700
)
)
library("shiny", lib.loc="C:/Program Files/R/R-3/library")
shinyAppDir(
system.file("inst/shiny", package="knitr"),
options=list(
width="100%", height=700
))
system.file("inst/shiny", package="knitr")
devtools::install_github(c("yihui/knitr", "rstudio/shiny"))
library("shiny", lib.loc="C:/Program Files/R/R-3/library")
rmarkdown::run("Untitled1.Rmd")
rmarkdown::run("PresShiny.Rmd")
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
devtools::install_github("hadley/reshape2")
library("devtools", lib.loc="C:/Program Files/R/R-3/library")
library("devtools", lib.loc="C:/Program Files/R/R-3/library")
devtools::install_github("hadley/reshape2")
devtools::install_github(c("yihui/knitr", "rstudio/shiny"))
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
setwd("D:/Inegi/R/shiny/Etapa01")
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
shiny::runApp('D:/INEGI/R/shiny/Etapa01')
devtools::install_github("rstudio/rmarkdown")
